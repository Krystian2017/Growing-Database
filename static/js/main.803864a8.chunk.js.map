{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","id","title","body","setInterval","index","length","push","concat","App","state","comments","getData","_this","console","log","setState","this","idI","clearInterval","map","comment","react_default","a","createElement","key","className","href","reverse","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAIMA,SAAO,CACX,CAAEC,GAAI,EAAGC,MAAO,mBAAoBC,KAAM,gCAC1C,CAAEF,GAAI,EAAGC,MAAO,mBAAoBC,KAAM,kCAG5CC,YAAY,WACV,IAAMC,EAAQL,EAAKM,OAAS,EAC5BN,EAAKO,KAAK,CACRN,GAAII,EACJH,MAAK,kBAAAM,OAAoBH,GACzBF,KAAI,0BAAAK,OAA4BH,EAA5B,WAGL,SAwDYI,6MArDbC,MAAQ,CACNC,SAAQ,GAAAH,OAAMR,MAGhBY,QAAU,WACJC,EAAKH,MAAMC,SAASL,SAAWN,EAAKM,QACtCQ,QAAQC,IAAI,UACZF,EAAKG,SAAS,CACZL,SAAQ,GAAAH,OAAMR,MAGhBc,QAAQC,IAAI,uHAKdE,KAAKC,IAAMd,YAAYa,KAAKL,QAAS,oDAIrCO,cAAcF,KAAKC,sCAInB,IAAMP,EAAWM,KAAKP,MAAMC,SAASS,IAAI,SAAAC,GAAO,OAC9CC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQpB,IAChBqB,EAAAC,EAAAC,cAAA,UAAKH,EAAQnB,OACboB,EAAAC,EAAAC,cAAA,WAAMH,EAAQlB,SAIlB,OACEmB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,oBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAAb,gJAGU,IACRJ,EAAAC,EAAAC,cAAA,KACEE,UAAU,WACVC,KAAK,oDAFP,wBAQHhB,EAASiB,kBAhDAC,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.803864a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// pseudo growing database\nconst data = [\n  { id: 1, title: \"Message number 1\", body: \"Message content number 1 ...\" },\n  { id: 2, title: \"Message number 2\", body: \"Message content number 2 ...\" }\n];\n\nsetInterval(() => {\n  const index = data.length + 1;\n  data.push({\n    id: index,\n    title: `Message number ${index}`,\n    body: `Message content number ${index} ...`\n  });\n  // console.log(data);\n}, 5000);\n\nclass App extends Component {\n  state = {\n    comments: [...data]\n  };\n\n  getData = () => {\n    if (this.state.comments.length !== data.length) {\n      console.log(\"update\");\n      this.setState({\n        comments: [...data]\n      });\n    } else {\n      console.log(\"the same data - does not update\");\n    }\n  };\n\n  componentDidMount() {\n    this.idI = setInterval(this.getData, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.idI);\n  }\n\n  render() {\n    const comments = this.state.comments.map(comment => (\n      <div key={comment.id}>\n        <h4>{comment.title}</h4>\n        <div>{comment.body}</div>\n      </div>\n    ));\n    // console.log(comments);\n    return (\n      <div className=\"App\">\n        <div>\n          <h1 className=\"App-header\">Growing Database</h1>\n          <p className=\"App-description\">\n            This application is a pseudo growing database - I created it with\n            the help of create-app React. It is simply app and you can find the\n            code on{\" \"}\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/Krystian2017/Growing-Database\"\n            >\n              my GitHub account.\n            </a>\n          </p>\n        </div>\n        {comments.reverse()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}